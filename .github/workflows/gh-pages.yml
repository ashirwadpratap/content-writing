# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: Deploy Hugo site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.120.2
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb          
      - name: Install Dart Sass
        run: sudo snap install dart-sass
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3
      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
      - name: Build with Hugo
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo \
            --gc \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./public

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
 Empty file added0  
.hugo_build.lock
Empty file.
 5 changes: 5 additions & 0 deletions5  
archetypes/default.md
@@ -0,0 +1,5 @@
+++
title = '{{ replace .File.ContentBaseName "-" " " | title }}'
date = {{ .Date }}
draft = true
+++
 105 changes: 105 additions & 0 deletions105  
content/_index.md
@@ -0,0 +1,105 @@
# How to fix error "__dirname is not described in ES module scope" in Node


## What is the error message " __dirname isn't defined in ES module scope " in Node?


The blunders message "__dirname is not defined in ES module scope" means that you are attempting to apply the __dirnamevariable in an ES module, but the __dirname variable isn't always available in ES modules with the aid of  default.


## Why is the __dirname variable no longer available in ES modules with the aid of default?


The __dirname variable is a CommonJS global variable that returns the listing call of the modern script. ES modules are a more recent module layout that is designed to be more modular and reusable. ES modules no longer have the right of entry to CommonJS international variables by way of default.


## How to fix the error message "__dirname isn't described in ES module scope"


There are two approaches to repair the mistake message "__dirname isn't described in ES module scope":


- Use the import.Meta.Url property to get the URL of the current module. You can then use the direction. Dirname() technique to get the directory call of the cutting-edge module.


- For instance, the following code shows the way to get the listing name of the modern module using the import.Meta.Urlproperty and the route. Dirname() approach:


- JavaScript
- import path from 'path';


- const __dirname = direction.Dirname(import.Meta.Url);


- Use a 3rd-party bundle to get the __dirnamevariable. There are a few 0.33-party programs that offer the __dirnamevariable for ES modules. One famous package deal is referred to as not unusual-es.


### To use the commonplace-es bundle, you can set up it the usage of the subsequent command:


- npm deploy commonplace-es


- Once the package deal is established, you can import it into your code and use the getGlobals() characteristic to get the __dirnamevariable.


- For example, the subsequent code indicates how to get the __dirnamevariable using the not unusual-es bundle:


- JavaScript
- import  getGlobals  from 'common-es';


- const __dirname getGlobals().__dirname;


- To fix error “_ _dirname is not defined in Es module scope “ in node


1. Use CommonJS Modules:
The easiest manner to resolve this mistake is to change from the use of ES modules to CommonJS modules through changing the report extension from ".Mjs" to ".Cjs" or ".Js". CommonJS modules have an entry to the __dirname and __filename variables.


For example, if you have a report named "myModule.Mjs," trade it to "myModule.Cjs" or "myModule.Js."


2. Use import.Meta.Url:
If you need to retain the use of ES modules, you could use the import.Meta.Url property to get the current module's URL, which you can then parse to extract the listing path. Here's an example:


### import { fileURLToPath } from 'url';
### import { dirname } from 'path';


### const __filename = fileURLToPath(import.meta.url);
### const __dirname = dirname(__filename);


// Now, you can use __dirname in your code.




## Which method should you use?
